[project]
name = "vectorize"
version = "0.1.0"
description = "AWP Projekt für Text Embedding Service"
authors = [
    { name = "ManuelDausmann" },
    { name = "Yannjc" },
    { name = "Dosto1ewski" },
    { name = "BtnCbn" },
    { name = "Yukasama" },
]
maintainers = [
    { name = "ManuelDausmann" },
    { name = "Yannjc" },
    { name = "Dosto1ewski" },
    { name = "BtnCbn" },
    { name = "Yukasama" },
]
readme = "README.md"
license = { text = "Apache 2.0" }
requires-python = ">=3.13"
keywords = [
    "AI",
    "AI Training",
    "AI Inference",
    "Synthetic Data Generation",
    "AI Model Hosting",
    "AI Evaluation",
]
classifiers = [
    "Development Status :: 1 - Planning",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Framework :: Pytest",
    "Framework :: MkDocs",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "fastapi[standard]>=0.115.12",
    "pydantic>=2.10.6",
    "pandas>=2.2.3",
    "numpy>=2.2.4",
    "uvicorn>=0.34.0",
    "python-multipart>=0.0.20",
    "loguru>=0.7.3",
    "aiofiles>=24.1.0",
    "lxml>=5.3.2",
    "sqlmodel>=0.0.24",
    "aiosqlite>=0.21.0",
    "hf-xet>=1.0.3",
    "huggingface-hub>=0.30.2",
    "transformers>=4.51.3",
    "torch>=2.6.0",
    "defusedxml>=0.7.1",
    "openpyxl>=3.1.5",
    "pydantic-settings>=2.9.1",
    "prometheus-fastapi-instrumentator>=7.1.0",
    "gitpython>=3.1.44",
    "loki-logger-handler>=1.1.1",
    "pyfiglet>=1.0.2",
    "polars>=1.30.0",
    "orjson>=3.10.18",
    "pyarrow>=20.0.0",
    "chardet>=5.2.0",
    "datasets>=3.6.0",
    "dramatiq>=1.18.0",
    "redis>=6.2.0",
    "sentence-transformers>=4.1.0",
    "accelerate>=1.7.0"
]

[project.scripts]
app = "vectorize:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "hatch>=1.14.0",
    "hatchling>=1.27.0",
    "ruff>=0.11.2",
    "mkdocs>=1.6.1",
    "pytest>=8.3.5",
    "locust>=2.34.1",
    "markdown>=3.7",
    "safety>=3.2.9",
    "mkdocs-build-plantuml-plugin>=1.11.0",
    "pytest-html>=4.1.1",
    "pytest-github-actions-annotate-failures>=0.3.0",
    "pytest-asyncio>=0.26.0",
    "snakeviz>=2.2.2",
    "pyright>=1.1.401",
    "pytest-cov>=6.1.1",
    "mkdocs-material>=9.6.14",
    "mkdocstrings[python]>=0.29.1",
    "testcontainers[redis]>=4.10.0",
]

[tool.hatch.build.targets.sdist]
include = ["src/vectorize"]
[tool.hatch.build.targets.wheel]
packages = ["src/vectorize"]

[tool.pytest.ini_options]
markers = [
    "dataset: marks test as a dataset test",
    "dataset_valid: marks test as a dataset valid test",
    "dataset_invalid: marks test as a dataset invalid test",
    "dataset_read: marks test as a dataset read test",
    "dataset_write: marks test as a dataset write test",
    "dataset_hf: marks test as a dataset huggingface test",
    "inference: marks test as an inference test",
    "huggingface: marks test as a huggingface test",
    "github: marks test as a github test",
    "upload: mark test as upload related",
    "ai_model: mark test as ai model related",
    "ai_model_read: mark test as ai model read related",
    "ai_model_write: mark test as ai model write related",
    "synthesis: marks test as synthesis related",
    "evaluation: marks test as evaluation related",
    "evaluation_unit: marks test as evaluation unit test",
    "evaluation_api: marks test as evaluation API test",
    "evaluation_integration: marks test as evaluation integration test",
    "integration: marks test as integration test",
    "api: marks test as API test",
    "training: marks test as training related",
    "edge_cases: marks test as edge cases and stress tests",
    "tasks: marks test as tasks related",
]
minversion = "8.3.5"
testpaths = ["tests"]
addopts = "--cov=vectorize --cov-report=term-missing --cov-report=html --html=report.html"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"

[tool.ruff]
preview = true

# Credits: Prof. Dr. Jürgen Zimmermann (HKA)
[tool.ruff.lint]
select = [
    "FAST",   # FastAPI
    "B",      # flake8-bugbear https://github.com/PyCQA/flake8-bugbear
    "ASYNC",  # flake8-async https://github.com/python-trio/flake8-async
    "S",      # flake8-bandit https://github.com/tylerwince/flake8-bandit Bandit>=1.7.1
    "A",      # flake8-builtins https://github.com/gforcada/flake8-builtins
    "COM",    # flake8-commas https://github.com/PyCQA/flake8-commas
    "C4",     # flake8-comprehensions https://github.com/adamchainz/flake8-comprehensions
    "ISC001", # flake8-implicit-str-concat https://github.com/flake8-implicit-str-concat/flake8-implicit-str-concat
    "PIE",    # flake8-pie https://github.com/sbdchd/flake8-pie
    "RET",    # flake8-return https://github.com/afonasev/flake8-return
    "SIM",    # flake8-simplify https://github.com/MartinThoma/flake8-simplify
    "I",      # isort https://github.com/PyCQA/isort
    "N",      # pep8-naming https://github.com/PyCQA/pep8-naming
    "PERF",   # Perflint https://github.com/tonybaloney/perflint
    "E",      # pycodestyle https://github.com/pycqa/pycodestyle
    "W",      # pycodestyle (warning)
    "D",      # pydoclint https://github.com/jsh9/pydoclint
    "F",      # Pyflakes https://github.com/PyCQA/pyflakes
    "PL",     # Pylint https://pypi.org/project/pylint
    "UP",     # pyupgrade https://github.com/asottile/pyupgrade
    "FURB",   # refurb https://github.com/dosisod/refurb
    "RUF",    # Ruff-specific rules https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "PTH",    # flake8-use-pathlib
    "SLF",    # flake8-self
    "TD",     # flake8-todos
    "ANN",    # flake8-annotations (enforce type hints)
    "T",      # flake8-print https://github.com/jbkahn/flake8-print
    "G",      # flake8-logging-format https://github.com/globality-corp/flake8-logging-format
    # "EM",     # flake8-errmsg https://github.com/best-doctor/flake8-errmsg
    "SLOT", # flake8-slots https://github.com/python-discord/flake8-slots
    "ARG",  # flake8-unused-arguments https://github.com/nhoad/flake8-unused-arguments
    "DTZ",  # flake8-datetimez https://github.com/pjknkda/flake8-datetimez
    "S",    # flake8-bandit https://github.com/tylerwince/flake8-bandit
]
pydocstyle.convention = "google"
ignore = [
    "D203",   # https://docs.astral.sh/ruff/rules/incorrect-blank-line-before-class
    "D213",   # https://docs.astral.sh/ruff/rules/multi-line-summary-second-line
    "RET503", # https://docs.astral.sh/ruff/rules/implicit-return
    "RUF012",
    "COM812", # https://docs.astral.sh/ruff/rules/missing-trailing-comma
]

[tool.ruff.lint.isort]
case-sensitive = true

[tool.pyright]
pythonVersion = "3.13"
include = ["src"]
exclude = ["**/__pycache__"]

[tool.uv]
default-groups = "all"
